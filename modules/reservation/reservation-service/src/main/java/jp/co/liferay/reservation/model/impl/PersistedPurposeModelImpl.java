/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package jp.co.liferay.reservation.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import jp.co.liferay.reservation.model.PersistedPurpose;
import jp.co.liferay.reservation.model.PersistedPurposeModel;
import jp.co.liferay.reservation.model.PersistedPurposeSoap;

/**
 * The base model implementation for the PersistedPurpose service. Represents a row in the &quot;Reservation_PersistedPurpose&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PersistedPurposeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersistedPurposeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersistedPurposeImpl
 * @generated
 */
@JSON(strict = true)
public class PersistedPurposeModelImpl
	extends BaseModelImpl<PersistedPurpose> implements PersistedPurposeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persisted purpose model instance should use the <code>PersistedPurpose</code> interface instead.
	 */
	public static final String TABLE_NAME = "Reservation_PersistedPurpose";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"purposeId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purposeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Reservation_PersistedPurpose (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,purposeId LONG not null primary key,name VARCHAR(75) null,companyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Reservation_PersistedPurpose";

	public static final String ORDER_BY_JPQL =
		" ORDER BY persistedPurpose.purposeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Reservation_PersistedPurpose.purposeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long PURPOSEID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PersistedPurpose toModel(PersistedPurposeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PersistedPurpose model = new PersistedPurposeImpl();

		model.setUuid(soapModel.getUuid());
		model.setExternalReferenceCode(soapModel.getExternalReferenceCode());
		model.setPurposeId(soapModel.getPurposeId());
		model.setName(soapModel.getName());
		model.setCompanyId(soapModel.getCompanyId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PersistedPurpose> toModels(
		PersistedPurposeSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<PersistedPurpose> models = new ArrayList<PersistedPurpose>(
			soapModels.length);

		for (PersistedPurposeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_RESERVATION_ROOMS_PURPOSES_NAME =
		"Reservation_Rooms_Purposes";

	public static final Object[][]
		MAPPING_TABLE_RESERVATION_ROOMS_PURPOSES_COLUMNS = {
			{"companyId", Types.BIGINT}, {"purposeId", Types.BIGINT},
			{"roomId", Types.BIGINT}
		};

	public static final String
		MAPPING_TABLE_RESERVATION_ROOMS_PURPOSES_SQL_CREATE =
			"create table Reservation_Rooms_Purposes (companyId LONG not null,purposeId LONG not null,roomId LONG not null,primary key (purposeId, roomId))";

	public PersistedPurposeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _purposeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPurposeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _purposeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PersistedPurpose.class;
	}

	@Override
	public String getModelClassName() {
		return PersistedPurpose.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PersistedPurpose, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PersistedPurpose, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedPurpose, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PersistedPurpose)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PersistedPurpose, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PersistedPurpose, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PersistedPurpose)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PersistedPurpose, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PersistedPurpose, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PersistedPurpose>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PersistedPurpose.class.getClassLoader(), PersistedPurpose.class,
			ModelWrapper.class);

		try {
			Constructor<PersistedPurpose> constructor =
				(Constructor<PersistedPurpose>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PersistedPurpose, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PersistedPurpose, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PersistedPurpose, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<PersistedPurpose, Object>>();
		Map<String, BiConsumer<PersistedPurpose, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<PersistedPurpose, ?>>();

		attributeGetterFunctions.put("uuid", PersistedPurpose::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<PersistedPurpose, String>)PersistedPurpose::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode",
			PersistedPurpose::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<PersistedPurpose, String>)
				PersistedPurpose::setExternalReferenceCode);
		attributeGetterFunctions.put(
			"purposeId", PersistedPurpose::getPurposeId);
		attributeSetterBiConsumers.put(
			"purposeId",
			(BiConsumer<PersistedPurpose, Long>)PersistedPurpose::setPurposeId);
		attributeGetterFunctions.put("name", PersistedPurpose::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<PersistedPurpose, String>)PersistedPurpose::setName);
		attributeGetterFunctions.put(
			"companyId", PersistedPurpose::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PersistedPurpose, Long>)PersistedPurpose::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		_columnBitmask |= EXTERNALREFERENCECODE_COLUMN_BITMASK;

		if (_originalExternalReferenceCode == null) {
			_originalExternalReferenceCode = _externalReferenceCode;
		}

		_externalReferenceCode = externalReferenceCode;
	}

	public String getOriginalExternalReferenceCode() {
		return GetterUtil.getString(_originalExternalReferenceCode);
	}

	@JSON
	@Override
	public long getPurposeId() {
		return _purposeId;
	}

	@Override
	public void setPurposeId(long purposeId) {
		_purposeId = purposeId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PersistedPurpose.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PersistedPurpose toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PersistedPurpose>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersistedPurposeImpl persistedPurposeImpl = new PersistedPurposeImpl();

		persistedPurposeImpl.setUuid(getUuid());
		persistedPurposeImpl.setExternalReferenceCode(
			getExternalReferenceCode());
		persistedPurposeImpl.setPurposeId(getPurposeId());
		persistedPurposeImpl.setName(getName());
		persistedPurposeImpl.setCompanyId(getCompanyId());

		persistedPurposeImpl.resetOriginalValues();

		return persistedPurposeImpl;
	}

	@Override
	public int compareTo(PersistedPurpose persistedPurpose) {
		long primaryKey = persistedPurpose.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PersistedPurpose)) {
			return false;
		}

		PersistedPurpose persistedPurpose = (PersistedPurpose)object;

		long primaryKey = persistedPurpose.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		PersistedPurposeModelImpl persistedPurposeModelImpl = this;

		persistedPurposeModelImpl._originalUuid =
			persistedPurposeModelImpl._uuid;

		persistedPurposeModelImpl._originalExternalReferenceCode =
			persistedPurposeModelImpl._externalReferenceCode;

		persistedPurposeModelImpl._originalCompanyId =
			persistedPurposeModelImpl._companyId;

		persistedPurposeModelImpl._setOriginalCompanyId = false;

		persistedPurposeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PersistedPurpose> toCacheModel() {
		PersistedPurposeCacheModel persistedPurposeCacheModel =
			new PersistedPurposeCacheModel();

		persistedPurposeCacheModel.uuid = getUuid();

		String uuid = persistedPurposeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			persistedPurposeCacheModel.uuid = null;
		}

		persistedPurposeCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			persistedPurposeCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			persistedPurposeCacheModel.externalReferenceCode = null;
		}

		persistedPurposeCacheModel.purposeId = getPurposeId();

		persistedPurposeCacheModel.name = getName();

		String name = persistedPurposeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			persistedPurposeCacheModel.name = null;
		}

		persistedPurposeCacheModel.companyId = getCompanyId();

		return persistedPurposeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PersistedPurpose, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PersistedPurpose, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedPurpose, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PersistedPurpose)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PersistedPurpose, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PersistedPurpose, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedPurpose, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PersistedPurpose)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PersistedPurpose>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private String _externalReferenceCode;
	private String _originalExternalReferenceCode;
	private long _purposeId;
	private String _name;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private PersistedPurpose _escapedModel;

}