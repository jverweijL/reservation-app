/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package jp.co.liferay.reservation.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import jp.co.liferay.reservation.model.PersistedParticipant;
import jp.co.liferay.reservation.model.PersistedParticipantModel;
import jp.co.liferay.reservation.model.PersistedParticipantSoap;

/**
 * The base model implementation for the PersistedParticipant service. Represents a row in the &quot;Reservation_PersistedParticipant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PersistedParticipantModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersistedParticipantImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersistedParticipantImpl
 * @generated
 */
@JSON(strict = true)
public class PersistedParticipantModelImpl
	extends BaseModelImpl<PersistedParticipant>
	implements PersistedParticipantModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persisted participant model instance should use the <code>PersistedParticipant</code> interface instead.
	 */
	public static final String TABLE_NAME = "Reservation_PersistedParticipant";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"participantId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"fullName", Types.VARCHAR}, {"companyName", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("participantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Reservation_PersistedParticipant (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,participantId LONG not null primary key,userId LONG,fullName VARCHAR(75) null,companyName VARCHAR(75) null,emailAddress VARCHAR(75) null,companyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Reservation_PersistedParticipant";

	public static final String ORDER_BY_JPQL =
		" ORDER BY persistedParticipant.participantId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Reservation_PersistedParticipant.participantId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long PARTICIPANTID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PersistedParticipant toModel(
		PersistedParticipantSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		PersistedParticipant model = new PersistedParticipantImpl();

		model.setUuid(soapModel.getUuid());
		model.setExternalReferenceCode(soapModel.getExternalReferenceCode());
		model.setParticipantId(soapModel.getParticipantId());
		model.setUserId(soapModel.getUserId());
		model.setFullName(soapModel.getFullName());
		model.setCompanyName(soapModel.getCompanyName());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setCompanyId(soapModel.getCompanyId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PersistedParticipant> toModels(
		PersistedParticipantSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<PersistedParticipant> models = new ArrayList<PersistedParticipant>(
			soapModels.length);

		for (PersistedParticipantSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String
		MAPPING_TABLE_RESERVATION_PARTICIPANTS_BOOKINGS_NAME =
			"Reservation_Participants_Bookings";

	public static final Object[][]
		MAPPING_TABLE_RESERVATION_PARTICIPANTS_BOOKINGS_COLUMNS = {
			{"companyId", Types.BIGINT}, {"bookingId", Types.BIGINT},
			{"participantId", Types.BIGINT}
		};

	public static final String
		MAPPING_TABLE_RESERVATION_PARTICIPANTS_BOOKINGS_SQL_CREATE =
			"create table Reservation_Participants_Bookings (companyId LONG not null,bookingId LONG not null,participantId LONG not null,primary key (bookingId, participantId))";

	public PersistedParticipantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _participantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParticipantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _participantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PersistedParticipant.class;
	}

	@Override
	public String getModelClassName() {
		return PersistedParticipant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PersistedParticipant, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PersistedParticipant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedParticipant, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PersistedParticipant)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PersistedParticipant, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PersistedParticipant, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PersistedParticipant)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PersistedParticipant, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PersistedParticipant, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PersistedParticipant>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PersistedParticipant.class.getClassLoader(),
			PersistedParticipant.class, ModelWrapper.class);

		try {
			Constructor<PersistedParticipant> constructor =
				(Constructor<PersistedParticipant>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PersistedParticipant, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PersistedParticipant, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PersistedParticipant, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<PersistedParticipant, Object>>();
		Map<String, BiConsumer<PersistedParticipant, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<PersistedParticipant, ?>>();

		attributeGetterFunctions.put("uuid", PersistedParticipant::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<PersistedParticipant, String>)
				PersistedParticipant::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode",
			PersistedParticipant::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<PersistedParticipant, String>)
				PersistedParticipant::setExternalReferenceCode);
		attributeGetterFunctions.put(
			"participantId", PersistedParticipant::getParticipantId);
		attributeSetterBiConsumers.put(
			"participantId",
			(BiConsumer<PersistedParticipant, Long>)
				PersistedParticipant::setParticipantId);
		attributeGetterFunctions.put("userId", PersistedParticipant::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<PersistedParticipant, Long>)
				PersistedParticipant::setUserId);
		attributeGetterFunctions.put(
			"fullName", PersistedParticipant::getFullName);
		attributeSetterBiConsumers.put(
			"fullName",
			(BiConsumer<PersistedParticipant, String>)
				PersistedParticipant::setFullName);
		attributeGetterFunctions.put(
			"companyName", PersistedParticipant::getCompanyName);
		attributeSetterBiConsumers.put(
			"companyName",
			(BiConsumer<PersistedParticipant, String>)
				PersistedParticipant::setCompanyName);
		attributeGetterFunctions.put(
			"emailAddress", PersistedParticipant::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<PersistedParticipant, String>)
				PersistedParticipant::setEmailAddress);
		attributeGetterFunctions.put(
			"companyId", PersistedParticipant::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PersistedParticipant, Long>)
				PersistedParticipant::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		_columnBitmask |= EXTERNALREFERENCECODE_COLUMN_BITMASK;

		if (_originalExternalReferenceCode == null) {
			_originalExternalReferenceCode = _externalReferenceCode;
		}

		_externalReferenceCode = externalReferenceCode;
	}

	public String getOriginalExternalReferenceCode() {
		return GetterUtil.getString(_originalExternalReferenceCode);
	}

	@JSON
	@Override
	public long getParticipantId() {
		return _participantId;
	}

	@Override
	public void setParticipantId(long participantId) {
		_participantId = participantId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PersistedParticipant.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PersistedParticipant toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PersistedParticipant>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersistedParticipantImpl persistedParticipantImpl =
			new PersistedParticipantImpl();

		persistedParticipantImpl.setUuid(getUuid());
		persistedParticipantImpl.setExternalReferenceCode(
			getExternalReferenceCode());
		persistedParticipantImpl.setParticipantId(getParticipantId());
		persistedParticipantImpl.setUserId(getUserId());
		persistedParticipantImpl.setFullName(getFullName());
		persistedParticipantImpl.setCompanyName(getCompanyName());
		persistedParticipantImpl.setEmailAddress(getEmailAddress());
		persistedParticipantImpl.setCompanyId(getCompanyId());

		persistedParticipantImpl.resetOriginalValues();

		return persistedParticipantImpl;
	}

	@Override
	public int compareTo(PersistedParticipant persistedParticipant) {
		long primaryKey = persistedParticipant.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PersistedParticipant)) {
			return false;
		}

		PersistedParticipant persistedParticipant =
			(PersistedParticipant)object;

		long primaryKey = persistedParticipant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		PersistedParticipantModelImpl persistedParticipantModelImpl = this;

		persistedParticipantModelImpl._originalUuid =
			persistedParticipantModelImpl._uuid;

		persistedParticipantModelImpl._originalExternalReferenceCode =
			persistedParticipantModelImpl._externalReferenceCode;

		persistedParticipantModelImpl._originalCompanyId =
			persistedParticipantModelImpl._companyId;

		persistedParticipantModelImpl._setOriginalCompanyId = false;

		persistedParticipantModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PersistedParticipant> toCacheModel() {
		PersistedParticipantCacheModel persistedParticipantCacheModel =
			new PersistedParticipantCacheModel();

		persistedParticipantCacheModel.uuid = getUuid();

		String uuid = persistedParticipantCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			persistedParticipantCacheModel.uuid = null;
		}

		persistedParticipantCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			persistedParticipantCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			persistedParticipantCacheModel.externalReferenceCode = null;
		}

		persistedParticipantCacheModel.participantId = getParticipantId();

		persistedParticipantCacheModel.userId = getUserId();

		persistedParticipantCacheModel.fullName = getFullName();

		String fullName = persistedParticipantCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			persistedParticipantCacheModel.fullName = null;
		}

		persistedParticipantCacheModel.companyName = getCompanyName();

		String companyName = persistedParticipantCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			persistedParticipantCacheModel.companyName = null;
		}

		persistedParticipantCacheModel.emailAddress = getEmailAddress();

		String emailAddress = persistedParticipantCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			persistedParticipantCacheModel.emailAddress = null;
		}

		persistedParticipantCacheModel.companyId = getCompanyId();

		return persistedParticipantCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PersistedParticipant, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PersistedParticipant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedParticipant, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((PersistedParticipant)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PersistedParticipant, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PersistedParticipant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedParticipant, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((PersistedParticipant)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PersistedParticipant>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private String _externalReferenceCode;
	private String _originalExternalReferenceCode;
	private long _participantId;
	private long _userId;
	private String _fullName;
	private String _companyName;
	private String _emailAddress;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private PersistedParticipant _escapedModel;

}