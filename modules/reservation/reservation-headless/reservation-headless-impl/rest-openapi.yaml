components:
  schemas:
    Time:
      description: Contains time data.
      properties:
        hours:
          type: string
        minutes:
          type: string
        ampm:
          type: string
      required: 
        - hours
        - minutes
        - ampm
      type: object
    Office:
      description: Contains information about an office site. Has rooms.
      properties:
        officeId:
          description: The primary key for the Office entity.
          type: integer
          format: int64
          readOnly: true
        name:
          description: Office's name.
          type: string
        location:
          description: Office's location or address.
          type: string
      required: 
        - name
        - location
      type: object
    Participant:
      description: Contains information about a booking participant.
      properties:
        participantId:
          description: The primary key for the Participant entity.
          type: integer
          format: int64
          readOnly: true
        userId:
          description: Set to 0 if not associated with any existing Liferay user. Will use existing liferay user's attributes and ignore other fields if userID is valid.
          type: integer
          format: int64
        fullName:
          description: Participant's full name.
          type: string
        companyName:
          description: Participant's company name.
          type: string
        emailAddress:
          description: Participant's email address.
          type: string
      required: 
        - userId
      type: object
    Amenity:
      description: Contains information about a room's available amenities (microphones, projector, etc.)
      properties:
        amenityId:
          description: The primary key for the Amenity entity.
          type: integer
          format: int64
          readOnly: true
        name:
          description: The amenity name.
          type: string
      required: 
        - name
      type: object
    Purpose:
      description: Contains information about a room's designated purpose (meetings, townhall, etc.)
      properties:
        purposeId:
          description: The primary key for the Purpose entity.
          type: integer
          format: int64
          readOnly: true
        name:
          description: The purpose name.
          type: string
      required: 
        - name
      type: object
    Room:
      description: Contains all of the data for a single Room.
      properties:
        roomId:
          description: The primary key for the Room entity.
          type: integer
          format: int64
          readOnly: true
        name:
          description: The room name.
          type: string
        photoPath:
          description: The path or url of the room's photo.
          type: string
        availableMonday:
          description: The room's availability on a specified day (Mon).
          type: boolean
        availableTuesday:
          description: The room's availability on a specified day (Tue).
          type: boolean
        availableWednesday:
          description: The room's availability on a specified day (Wed).
          type: boolean
        availableThursday:
          description: The room's availability on a specified day (Thu).
          type: boolean
        availableFriday:
          description: The room's availability on a specified day (Fri).
          type: boolean
        availableSaturday:
          description: The room's availability on a specified day (Sat).
          type: boolean
        availableSunday:
          description: The room's availability on a specified day (Sun).
          type: boolean
        availableStartTime:
          description: The room's available start time.
          $ref: "#/components/schemas/Time"
        availableEndTime:
          description: The room's available end time.
          $ref: "#/components/schemas/Time"
        officeId:
          description: The id of the office that this room entity belongs to.
          type: integer
          format: int64
        officeName:
          description: The name of the office that this room entity blongs to.
          type: string
          readOnly: true
        capacitySquareMeters:
          description: The room's size in square meters.
          type: number
          format: double
        capacityPeople:
          description: The room's maximum capacity.
          type: integer
        phoneExtension:
          description: The room's extension phone number.
          type: integer
        wifiSSID:
          description: The room's wifi name.
          type: string
        wifiSecurityType:
          description: The room's wifi security type.
          type: integer
        wifiPassword:
          description: The room's wifi password.
          type: string
        amenityIds:
          description: Primary keys of the amenities for this room.
          type: array
          items:
            type: integer
            format: int64
        purposeIds:
          description: Primary keys of the purposes for this room.
          type: array
          items:
            type: integer
            format: int64
      required: 
        - name
        - photoPath
        - availableMonday
        - availableTuesday
        - availableWednesday
        - availableThursday
        - availableFriday
        - availableSaturday
        - availableSunday
        - availableStartTime
        - availableEndTime
        - officeId
        - capacitySquareMeters
        - capacityPeople
        - phoneExtensions
        - wifiSSID
        - wifiSecurityType
        - wifiPassword
      type: object
    Booking:
      description: Contains information about the booking.
      properties:
        bookingId:
          description: The primary key for the Booking entity.
          type: integer
          format: int64
          readOnly: true
        title:
          description: Title of the booking event.
          type: string
        date:
          description: Date of the booking event.
          type: string
          pattern: ^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$
        startTime:
          description: Start time of the booking event.
          $ref: "#/components/schemas/Time"
        endTime:
          description: End time of the booking event.
          $ref: "#/components/schemas/Time"
        roomId:
          description: Id associated with the room.
          type: integer
          format: int64
        roomName:
          description: Name associated with the room.
          type: string
          readOnly: true
        officeId:
          description: Id associated with the office.
          type: integer
          format: int64
          readOnly: true
        officeName:
          description: Name associated with the room.
          type: string
          readOnly: true
        description:
          description: A description of the booking event.
          type: string
        userId:
          description: The user who created the booking.
          type: integer
          format: int64
          readOnly: true
        userName:
          description: Name of associated user.
          type: string 
          readOnly: true
        participantIds:
          description: Primary keys of the participants for this booking.
          type: array
          items:
            type: integer
            format: int64
      required: 
        - title
        - date
        - startTime
        - endTime
        - roomId
        - description
      type: object
openapi: 3.0.1
info:
  description: "API for accessing Reservation details."
  license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  title: "Headless Reservation"
  version: v1.0
paths:
  "/offices":
    get:
      operationId: getOfficesPage
      tags: ["Office"]
      description: Retrieve the list of offices. Results can be paginated, filtered, searched and sorted.
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Office"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Office"
                type: array
    post:
      operationId: postOffice
      tags: ["Office"]
      description: Create a new office entity.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Office"
          application/xml:
            schema:
              $ref: "#/components/schemas/Office"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Office"
            application/xml:
              schema:
                $ref: "#/components/schemas/Office"
  "/offices/{officeId}":
    get:
      operationId: getOffice
      tags: ["Office"]
      description: Retrieves the office via its ID
      parameters: 
        - name: officeId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Office"
            application/xml:
              schema:
                $ref: "#/components/schemas/Office"
    put:
      operationId: putOffice
      tags: ["Office"]
      description: Updates and overwrites existing office entity.
      parameters: 
        - name: officeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Office"
          application/xml:
            schema:
              $ref: "#/components/schemas/Office"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Office"
            application/xml:
              schema:
                $ref: "#/components/schemas/Office"   
    delete:
      operationId: deleteOffice
      tags: ["Office"]
      description: Deletes the target office entity.
      parameters: 
        - name: officeId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: ""
          content:
            application/json: {} 
            application/xml: {} 
  "/participants":
    get:
      operationId: getParticipantsPage
      tags: ["Participant"]
      description: Retrieve the list of offices. Results can be paginated, filtered, searched and sorted.
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Participant"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Participant"
                type: array
    post:
      operationId: postParticipant
      tags: ["Participant"]
      description: Create a new participant entity.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Participant"
          application/xml:
            schema:
              $ref: "#/components/schemas/Participant"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
            application/xml:
              schema:
                $ref: "#/components/schemas/Participant"
  "/participants/{participantId}":
    get:
      operationId: getParticipant
      tags: ["Participant"]
      description: Retrieves the participant via its ID.
      parameters:
        - name: participantId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
            application/xml:
              schema:
                $ref: "#/components/schemas/Participant"
    put:
      operationId: putParticipant
      tags: ["Participant"]
      description: Updates and overwrites the target participant.
      parameters: 
        - name: participantId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Participant"
          application/xml:
            schema:
              $ref: "#/components/schemas/Participant"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
            application/xml:
              schema:
                $ref: "#/components/schemas/Participant"
    delete:
      operationId: deleteParticipant
      tags: ["Participant"]
      description: Deletes the target participant
      parameters: 
        - name: participantId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: ""
          content:
            application/json: {} 
            application/xml: {} 
  "/purposes":
    get:
      operationId: getPurposesPage
      tags: ["Purpose"]
      description: Retrieve the list of purposes. Results can be paginated, filtered, searched and sorted.
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Purpose"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Purpose"
                type: array
    post:
      operationId: postPurpos
      tags: ["Purpose"]
      description: Create a new purpose tag.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Purpose"
          application/xml:
            schema:
              $ref: "#/components/schemas/Purpose"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Purpose"
            application/xml:
              schema:
                $ref: "#/components/schemas/Purpose"
  "/purposes/{purposeId}":
    get:
      operationId: getPurposPurpose
      tags: ["Purpose"]
      description: Retrieves the purpose via its ID.
      parameters:
        - name: purposeId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Purpose"
            application/xml:
              schema:
                $ref: "#/components/schemas/Purpose"
    put: 
      operationId: putPurposPurpose
      tags: ["Purpose"]
      description: Updates and overwrites the target purpose.
      parameters:
        - name: purposeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Purpose"
          application/xml:
            schema:
              $ref: "#/components/schemas/Purpose"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Purpose"
            application/xml:
              schema:
                $ref: "#/components/schemas/Purpose"
    delete:
      operationId: deletePurposPurpose
      tags: ["Purpose"]
      description: Deletes the purpose and returns a 204 if the operation succeeds.
      parameters:
        - name: purposeId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: ""
          content:
            application/json: {}
            application/xml: {}
  "/amenities":
    get:
      operationId: getAmenitiesPage
      tags: ["Amenity"]
      description: Retrieve the list of amenities. Results can be paginated, filtered, searched and sorted.
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Amenity"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Amenity"
                type: array
    post:
      operationId: postAmenity
      tags: ["Amenity"]
      description: Create a new amenity.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Amenity"
          application/xml:
            schema:
              $ref: "#/components/schemas/Amenity"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Amenity"
            application/xml:
              schema:
                $ref: "#/components/schemas/Amenity"
  "/amenities/{amenityId}":
    get:
      operationId: getAmenity
      tags: ["Amenity"]
      description: Retrieves the amenity via its ID.
      parameters:
        - name: amenityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Amenity"
            application/xml:
              schema:
                $ref: "#/components/schemas/Amenity"
    put: 
      operationId: putAmenity
      tags: ["Amenity"]
      description: Updates and overwrites the amenity.
      parameters:
        - name: amenityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Amenity"
          application/xml:
            schema:
              $ref: "#/components/schemas/Amenity"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Amenity"
            application/xml:
              schema:
                $ref: "#/components/schemas/Amenity"
    delete:
      operationId: deleteAmenity
      tags: ["Amenity"]
      description: Deletes the amenity and returns a 204 if the operation succeeds.
      parameters:
        - name: amenityId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: ""
          content:
            application/json: {}
            application/xml: {}
  "/rooms":
    post:
      operationId: postRoom
      tags: ["Room"]
      description: Create a new room.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Room"
          application/xml:
            schema:
              $ref: "#/components/schemas/Room"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
            application/xml:
              schema:
                $ref: "#/components/schemas/Room"
    get:
      operationId: getRoomsPage
      tags: ["Room"]
      description: Retrieve the list of rooms. Results can be paginated, filtered, searched and sorted.
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Room"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Room"
                type: array
  "/rooms/{roomId}":
    get:
      operationId: getRoom
      tags: ["Room"]
      description: Retrieves the room via its ID.
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
            application/xml:
              schema:
                $ref: "#/components/schemas/Room"
    put: 
      operationId: putRoom
      tags: ["Room"]
      description: Updates and overwrites target room details.
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Room"
          application/xml:
            schema:
              $ref: "#/components/schemas/Room"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
            application/xml:
              schema:
                $ref: "#/components/schemas/Room"
    delete:
      operationId: deleteRoom
      tags: ["Room"]
      description: Deletes the room and returns a 204 if the operation succeeds.
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: ""
          content:
            application/json: {}
            application/xml: {}
  "/bookings":
    post:
      operationId: postBooking
      tags: ["Booking"]
      description: Create a new booking.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
          application/xml:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
            application/xml:
              schema:
                $ref: "#/components/schemas/Booking"
    get:
      operationId: getBookingsPage
      tags: ["Booking"]
      description: Retrieve the list of bookings. Results can be paginated, filtered, searched and sorted.
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Booking"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Booking"
                type: array
  "/bookings/{bookingId}":
    get:
      operationId: getBooking
      tags: ["Booking"]
      description: Retrieves the booking via its ID.
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
            application/xml:
              schema:
                $ref: "#/components/schemas/Booking"
    put: 
      operationId: putBooking
      tags: ["Booking"]
      description: Updates and overwrites the booking.
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
          application/xml:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
            application/xml:
              schema:
                $ref: "#/components/schemas/Booking"
    delete:
      operationId: deleteBooking
      tags: ["Booking"]
      description: Deletes the booking and returns a 204 if the operation succeeds.
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: ""
          content:
            application/json: {}
            application/xml: {}